from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from loguru import logger

from src.bot.features.home.keyboards import main_menu_keyboard
from src.bot.triggers import Texts
from src.core.repositories import friends as friends_repo

router = Router()


class FriendStates(StatesGroup):
    waiting_username = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("friends"))
async def friends_list(message: Message) -> None:
    links = await friends_repo.friends_for_user(message.from_user.id)
    if not links:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π üôÅ", reply_markup=main_menu_keyboard()
        )
        return

    lines = [
        f"{'‚úÖ' if l.confirmed else '‚è≥'} "
        f"{('@' + l.friend.username) if l.friend.username else l.friend_id}"
        for l in links
    ]
    await message.answer("\n".join(lines), reply_markup=main_menu_keyboard())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("addfriend"))
@router.message(F.text == Texts.Friends.ADD)
async def friend_add_start(message: Message, state: FSMContext) -> None:
    await state.set_state(FriendStates.waiting_username)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ Telegram‚Äë–Ω–∏–∫ –¥—Ä—É–≥–∞ (–º–æ–∂–Ω–æ —Å @):", reply_markup=main_menu_keyboard()
    )


@router.message(StateFilter(FriendStates.waiting_username))
async def friend_add_finish(message: Message, state: FSMContext, bot) -> None:
    raw_username = message.text.strip().lstrip("@")
    me = message.from_user

    try:
        already, confirmed_now, friend = await friends_repo.add_friend(
            me.id, me.username, raw_username
        )
    except LookupError:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.",
            reply_markup=main_menu_keyboard(),
        )
        await state.clear()
        return
    except ValueError:
        await message.answer(
            "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòâ", reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return

    await state.clear()

    if already:
        await message.answer(
            "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.",
            reply_markup=main_menu_keyboard(),
        )
        return

    if confirmed_now:
        await message.answer(
            f"üéâ –í—ã –∏ @{friend.username} —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è!",
            reply_markup=main_menu_keyboard(),
        )
        try:
            await bot.send_message(
                friend.telegram_id,
                f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{me.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!",
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥—É: {e}")
    else:
        await message.answer(
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! @{friend.username} –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_keyboard(),
        )
        try:
            await bot.send_message(
                friend.telegram_id,
                f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{me.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è.\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å ‚Äî /addfriend @{me.username}",
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("delfriend"))
async def friend_delete(message: Message, bot) -> None:
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer(
            "–§–æ—Ä–º–∞—Ç: /delfriend <username>", reply_markup=main_menu_keyboard()
        )
        return

    removed, friend = await friends_repo.delete_friend(
        message.from_user.id, parts[1].lstrip("@")
    )

    if friend is None:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard()
        )
        return
    if not removed:
        await message.answer(
            "–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_menu_keyboard()
        )
        return

    await message.answer("–î—Ä—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    try:
        await bot.send_message(
            friend.telegram_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –¥—Ä—É–∑–µ–π.",
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–∏—Ç—å –¥—Ä—É–≥—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
