from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from src.bot.triggers import Texts
from src.bot.features.friends.states import FriendStates
from src.bot.features.friends.keyboards import get_cancel_keyboard, get_main_keyboard
from src.core.repositories import friends as friends_repo
from src.core.repositories.user import ensure_user

router = Router()


@router.message(F.text == Texts.Friends.HOME)
async def friend_menu(message: Message, state: FSMContext):
    # Ensure user exists
    await ensure_user(message.from_user.id, message.from_user.username)
    await state.set_state(FriendStates.menu)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º–∏:", reply_markup=get_main_keyboard()
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", StateFilter(FriendStates.menu))
async def list_friends(message: Message, state: FSMContext):
    links = await friends_repo.friends_for_user(message.from_user.id)
    if not links:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π üôÅ", reply_markup=get_main_keyboard()
        )
    else:
        lines = []
        for l in links:
            mark = "‚úÖ" if l.confirmed else "‚è≥"
            uname = "@" + l.friend.username if l.friend.username else str(l.friend_id)
            lines.append(f"{mark} {uname}")
        await message.answer(
            "–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n" + "\n".join(lines), reply_markup=get_main_keyboard()
        )
    await state.clear()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", StateFilter(FriendStates.menu))
async def add_friend_start(message: Message, state: FSMContext):
    await state.set_state(FriendStates.waiting_add_username)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ Telegram‚Äë–Ω–∏–∫ –¥—Ä—É–≥–∞ (–±–µ–∑ @):", reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(FriendStates.waiting_add_username))
async def add_friend_finish(message: Message, state: FSMContext):
    raw_username = message.text.strip().lstrip("@")
    me = message.from_user
    try:
        already, confirmed_now, friend = await friends_repo.add_friend(
            me.id, me.username, raw_username
        )
    except LookupError:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    except ValueError:
        await message.answer(
            "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòâ", reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    await state.clear()
    if already:
        await message.answer(
            "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=get_main_keyboard()
        )
        return
    if confirmed_now:
        await message.answer(
            f"üéâ –í—ã –∏ @{friend.username} —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è!",
            reply_markup=get_main_keyboard(),
        )
    else:
        await message.answer(
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! @{friend.username} –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard(),
        )


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", StateFilter(FriendStates.menu))
async def remove_friend_start(message: Message, state: FSMContext):
    await state.set_state(FriendStates.waiting_remove_username)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram‚Äë–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ @):", reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(FriendStates.waiting_remove_username))
async def remove_friend_finish(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    removed, friend = await friends_repo.delete_friend(message.from_user.id, username)
    await state.clear()
    if friend is None:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard()
        )
    elif not removed:
        await message.answer(
            "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("–î—Ä—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_keyboard())
