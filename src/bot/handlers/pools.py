# src/bot/handlers/pools.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, delete, func

from src.bot.keyboards.start.start import get_welcome_keyboard
from src.bot.callbacks import Callbacks
from src.core.clients.databases.postgres import pg
from src.core.models.pool import Pool, PoolType, PoolAccountLink, PoolStatus
from src.core.models.base import Account, User, UserAccountLink

pools_router = Router()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def pools_panel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—É–ª—ã", callback_data=Callbacks.Pools.SHOW
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ûï –ù–æ–≤—ã–π –ø—É–ª", callback_data=Callbacks.Pools.ADD
                )
            ],
        ]
    )


def confirm_pool_kb(pid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"pool_run:{pid}"
                ),
                InlineKeyboardButton(
                    text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"pool_update:{pid}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pool_stop:{pid}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"pool_del:{pid}"
                ),
            ],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=Callbacks.Pools.INFO)],
        ]
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class NewPool(StatesGroup):
    label = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@pools_router.callback_query(F.data == Callbacks.Pools.INFO)
async def pools_panel(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–∞–º–∏."""
    await cb.answer()
    await cb.message.answer("üóÇ –ü–∞–Ω–µ–ª—å –ø—É–ª–æ–≤:", reply_markup=pools_panel_kb())


@pools_router.callback_query(F.data == Callbacks.Pools.SHOW)
async def list_pools(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É–ª–æ–≤."""
    await cb.answer()
    async with pg.session_maker() as sess:
        owner = await sess.scalar(
            select(User).where(User.telegram_id == str(cb.from_user.id))
        )
        if not owner:
            await cb.message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start", reply_markup=get_welcome_keyboard()
            )
            return

        pools = (
            await sess.scalars(select(Pool).where(Pool.owner_id == owner.id))
        ).all()

    if not pools:
        await cb.message.answer(
            "‚ùï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–ª–æ–≤.", reply_markup=pools_panel_kb()
        )
        return

    text = "<b>–í–∞—à–∏ –ø—É–ª—ã:</b>\n" + "\n".join(
        f"{p.id}. {p.label} ‚Äî {'üöÄ' if p.is_active else '‚è∏Ô∏è'}" for p in pools
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=p.label, callback_data=f"pool_manage:{p.id}")]
            for p in pools
        ]
        + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=Callbacks.Pools.INFO)]]
    )

    await cb.message.answer(text, parse_mode="HTML", reply_markup=kb)


@pools_router.callback_query(F.data == Callbacks.Pools.ADD)
async def ask_label(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º label."""
    await cb.answer()
    await state.set_state(NewPool.label)
    await cb.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (label) –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞:")


@pools_router.message(NewPool.label)
async def create_pool(msg: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—ë–º –ø—É–ª –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ main‚Äë–∞–∫–∫–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å sub‚Äë–∞–∫–∫–∏."""
    label = msg.text.strip()
    await state.clear()

    async with pg.session_maker() as sess:
        owner = await sess.scalar(
            select(User).where(User.telegram_id == str(msg.from_user.id))
        )
        if not owner:
            await msg.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start", reply_markup=get_welcome_keyboard()
            )
            return

        # —Å–æ–±–∏—Ä–∞–µ–º parent_id –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å–∞–±-–∞–∫–∫–∏
        rows = (
            await sess.execute(
                select(Account.parent_id, func.count())
                .where(Account.parent_id.isnot(None))
                .group_by(Account.parent_id)
            )
        ).all()
        parent_ids = {pid for pid, _ in rows if pid}

        # –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ main‚Äë–∞–∫–∫–∏
        mains = (
            await sess.scalars(
                select(Account).where(
                    Account.parent_id.is_(None),
                    Account.users.any(UserAccountLink.user_id == owner.id),
                    Account.id.in_(parent_ids),
                )
            )
        ).all()

        # —Å–æ–∑–¥–∞—ë–º –ø—É–ª
        pool = Pool(
            label=label,
            owner_id=owner.id,
            pool_type=PoolType.SUB_ACC_REQUIRED,
            is_active=False,
            status=PoolStatus.STOPPED,
        )
        sess.add(pool)
        await sess.flush()

        links = [PoolAccountLink(pool_id=pool.id, account_id=acc.id) for acc in mains]
        sess.add_all(links)
        await sess.commit()

        count = len(mains)

    await msg.answer(
        f"üÜï –ü—É–ª ¬´<b>{label}</b>¬ª —Å–æ–∑–¥–∞–Ω.\n–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{count}</b>",
        parse_mode="HTML",
        reply_markup=confirm_pool_kb(pool.id),
    )


@pools_router.callback_query(F.data.startswith("pool_manage:"))
async def manage_pool(cb: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—É–ª–æ–º."""
    await cb.answer()
    pid = int(cb.data.split(":", 1)[1])

    async with pg.session_maker() as sess:
        pool = await sess.get(Pool, pid)
        if not pool:
            await cb.message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

    await cb.message.answer(
        f"<b>–ü—É–ª:</b> {pool.label}\n" f"–°—Ç–∞—Ç—É—Å: {'üöÄ' if pool.is_active else '‚è∏Ô∏è'}",
        parse_mode="HTML",
        reply_markup=confirm_pool_kb(pid),
    )


@pools_router.callback_query(F.data.startswith("pool_run:"))
async def pool_run(cb: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –ø—É–ª–∞."""
    await cb.answer()
    pid = int(cb.data.split(":", 1)[1])
    async with pg.session_maker() as sess:
        pool = await sess.get(Pool, pid)
        if pool:
            pool.is_active = True
            pool.status = PoolStatus.RUNNING
            await sess.commit()
            await cb.message.answer("‚úÖ –ü—É–ª –∑–∞–ø—É—â–µ–Ω")
        else:
            await cb.message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


@pools_router.callback_query(F.data.startswith("pool_stop:"))
async def pool_stop(cb: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞."""
    await cb.answer()
    pid = int(cb.data.split(":", 1)[1])
    async with pg.session_maker() as sess:
        pool = await sess.get(Pool, pid)
        if pool:
            pool.is_active = False
            pool.status = PoolStatus.STOPPED
            await sess.commit()
            await cb.message.answer("üõë –ü—É–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            await cb.message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


@pools_router.callback_query(F.data.startswith("pool_update:"))
async def pool_update(cb: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ."""
    await cb.answer()
    pid = int(cb.data.split(":", 1)[1])
    async with pg.session_maker() as sess:
        pool = await sess.get(Pool, pid)
        if not pool:
            await cb.message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        current_ids = {link.account_id for link in pool.accounts}
        rows = (
            await sess.execute(
                select(Account.parent_id, func.count())
                .where(Account.parent_id.isnot(None))
                .group_by(Account.parent_id)
            )
        ).all()
        parent_ids = {pid for pid, _ in rows if pid}

        new_ids = set(
            await sess.scalars(
                select(Account.id).where(
                    Account.parent_id.is_(None),
                    Account.id.in_(parent_ids),
                )
            ).all()
        )

        to_add = new_ids - current_ids
        to_remove = current_ids - new_ids

        if to_add:
            sess.add_all(PoolAccountLink(pool_id=pid, account_id=i) for i in to_add)
        if to_remove:
            await sess.execute(
                delete(PoolAccountLink).where(
                    PoolAccountLink.pool_id == pid,
                    PoolAccountLink.account_id.in_(to_remove),
                )
            )
        await sess.commit()

    await cb.message.answer(
        f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ.\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {len(to_add)}\n–£–¥–∞–ª–µ–Ω–æ: {len(to_remove)}"
    )


@pools_router.callback_query(F.data.startswith("pool_del:"))
async def pool_del(cb: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∞."""
    await cb.answer()
    pid = int(cb.data.split(":", 1)[1])
    async with pg.session_maker() as sess:
        await sess.execute(
            delete(PoolAccountLink).where(PoolAccountLink.pool_id == pid)
        )
        await sess.execute(delete(Pool).where(Pool.id == pid))
        await sess.commit()

    await cb.message.answer("‚ùå –ü—É–ª —É–¥–∞–ª—ë–Ω")
