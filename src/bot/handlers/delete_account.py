from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    Message,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, delete
from loguru import logger

from src.bot.callbacks import Callbacks
from src.bot.keyboards.start.start import get_welcome_keyboard
from src.core.clients.databases.postgres import pg
from src.core.models import (
    User,
    Account,
    UserAccountLink,
    DepositAddress,
)

delete_router = Router()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class DeleteAccount(StatesGroup):
    waiting_api_key = State()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@delete_router.callback_query(F.data == Callbacks.Accounts.DELETE)
async def ask_pub_key(cb: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(DeleteAccount.waiting_api_key)
    await cb.message.edit_text(
        "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ PUBLIC¬†API‚ÄëKEY –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
        "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞.",
    )
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–∞–º–æ —É–¥–∞–ª–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@delete_router.message(DeleteAccount.waiting_api_key)
async def delete_account(msg: Message, state: FSMContext) -> None:
    api_key = msg.text.strip()

    async with pg.session_maker() as session:
        # —Ç–µ–∫—É—â–∏–π Telegram‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user: User | None = await session.scalar(
            select(User).where(User.telegram_id == str(msg.from_user.id))
        )
        if user is None:
            await state.clear()
            await msg.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.", reply_markup=get_welcome_keyboard()
            )
            return

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        link: UserAccountLink | None = await session.scalar(
            select(UserAccountLink)
            .join(Account, Account.id == UserAccountLink.account_id)
            .where(
                Account.api_key == api_key,
                UserAccountLink.user_id == user.id,
                UserAccountLink.is_admin.is_(True),
            )
        )
        if link is None:
            await state.clear()
            await msg.answer(
                "üö´ –¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_welcome_keyboard()
            )
            return

        account_id = (
            link.account_id
        )  # –Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ link.account (–∏–∑–±–µ–≥–∞–µ–º –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)

        # —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º –∞–∫–∫–∞—É–Ω—Ç
        await session.execute(
            delete(DepositAddress).where(DepositAddress.account_id == account_id)
        )
        await session.execute(
            delete(UserAccountLink).where(UserAccountLink.account_id == account_id)
        )
        await session.execute(delete(Account).where(Account.id == account_id))
        await session.commit()

        logger.info("Account %s —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", account_id, msg.from_user.id)

    await state.clear()
    await msg.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=get_welcome_keyboard())
